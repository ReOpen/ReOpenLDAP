#! /bin/bash
## $ReOpenLDAP$
## Copyright 2016-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

failure() {
	echo "$*" >&2
	exit 1
}

PACKAGE=ReOpenLDAP
PACKAGE_URL="https://github.com/leo-yuriev/ReOpenLDAP/wiki"
PACKAGE_BUGREPORT="https://github.com/leo-yuriev/ReOpenLDAP/issues"

RELEASE_TYPE=Devel

VERSION_MAJOR=1
VERSION_MINOR=2
VERSION_PATCH_LEVEL=0

API_CURRENT=14
API_REVISON=2
API_AGE=1

VERSION="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH_LEVEL}"
VERSION_NUMBER=$(expr ${VERSION_MAJOR} '*' 10000 + ${VERSION_MINOR} '*' 100 + ${VERSION_PATCH_LEVEL})

function IS_GIT {
        git rev-parse --git-dir 2>/dev/null
        TMPRSLT=$?
        if [[ $TMPRSLT -eq 0 ]]; then
          return 0
        else
          return 1
        fi
}

function RELEASE_DATE_CMD {
        IS_GIT
        GITTEST=$?
        if [[ $GITTEST -eq 0 ]]; then
          date --date=@$(git show -s --format=%ct HEAD) -u --iso-8601
        else
          echo "${EXT_DATE:-`date -u --iso-8601`}" 
        fi
}

function RELEASE_STAMP_CMD {
        IS_GIT
        GITTEST=$?
        if [[ $GITTEST -eq 0 ]]; then
          echo "g$(git show -s --abbrev=12 --format=%h HEAD)-t$(git show -s --abbrev=16 --format=%t HEAD)"
        else 
          echo "${EXT_HASH:-non-git}" 
        fi
}

PACKAGE_TITLE="${PACKAGE} ${VERSION}-${RELEASE_TYPE}"
PACKAGE_CAPTION=$(tr [:upper:] [:lower:] <<< "${PACKAGE}-${VERSION}-${RELEASE_TYPE}")
PACKAGE_TARNAME=$(tr [:upper:] [:lower:] <<< "${PACKAGE}")
API_LIB_RELEASE="${VERSION_MAJOR}.${VERSION_MINOR}"
API_LIB_VERSION="${API_CURRENT}:${API_REVISON}:${API_AGE}"

# Reproducible builds set SOURCE_DATE_EPOCH, want constant strings
if [ -n "${SOURCE_DATE_EPOCH}" ]; then
	WHOWHERE="reopenldap.${SOURCE_DATE_EPOCH}@SOURCE_DATE_EPOCH"
else
	WHOWHERE="$(whoami || echo $USER)@$(uname -n):$(pwd)"
fi

#######################################################################

if [ $# = 0 ]; then
	echo "***********************************************************************"
	echo "PACKAGE	= ${PACKAGE_TITLE}"
	echo "VERSION	= ${API_LIB_VERSION} / ${VERSION_NUMBER}"
	echo "DATE	= $(RELEASE_DATE_CMD)"
	echo "STAMP	= $(RELEASE_STAMP_CMD)"
	echo "WHOWHERE= ${WHOWHERE}"
	echo "***********************************************************************"
else
	while [ $# != 0 ]; do
		case "$1" in
			--package)
				echo "$PACKAGE"
				shift ;;
			--title)
				echo "$PACKAGE_TITLE"
				shift ;;
			--caption)
				echo "$PACKAGE_CAPTION"
				shift ;;
			--tarname)
				echo "$PACKAGE_TARNAME"
				shift ;;
			--version)
				echo "$VERSION"
				shift ;;
			--version-full)
				echo "${VERSION}-${RELEASE_TYPE}"
				shift ;;
			--number)
				echo "$VERSION_NUMBER"
				shift ;;
			--url)
				echo "$PACKAGE_URL"
				shift ;;
			--bugs)
				echo "$PACKAGE_BUGREPORT"
				shift ;;
			--type)
				echo "$RELEASE_TYPE"
				shift ;;
			--major)
				echo "$VERSION_MAJOR"
				shift ;;
			--minor)
				echo "$VERSION_MINOR"
				shift ;;
			--patch)
				echo "$VERSION_PATCH_LEVEL"
				shift ;;
			--date)
				echo "$(RELEASE_DATE_CMD)"
				shift ;;
			--stamp)
				echo "$(RELEASE_STAMP_CMD)"
				shift ;;
			--api)
				echo "$API_LIB_RELEASE"
				shift ;;
			--so)
				echo "$API_LIB_VERSION"
				shift ;;
			--current)
				echo "$API_CURRENT"
				shift ;;
			--revision)
				echo "$API_REVISION"
				shift ;;
			--age)
				echo "$API_AGE"
				shift ;;
			--whowhere)
				echo "$WHOWHERE"
				shift ;;
			--silent)
				shift ;;
			*)
				failure "usage: BRANDING ..., WTF '$1' ?" ;;
		esac
	done
fi
